#include<bits/stdc++.h>
using namespace std;

class MaxHeap{
    
    int *arr;
    int size;  // Total elements in heap at a point of time
    int total_size;  // Total size of array
    
    public:
    MaxHeap(int n){
        arr = new int[n];
        size = 0;
        total_size = n;
    }
    
    // Insert into the heap
    void insert(int value){
        // If heap size is avilable or not
        if(size == total_size){
            cout<<"Heap Overflow ";
            return;
        }
        
        arr[size] = value; // We do insertion at the last
        int index = size;
        size++;
        
        // Inserted element ko uske right position pe dalna
        while(index > 0 && arr[(index-1)/2] < arr[index]){   // agar parent element ,current element se chota hua
            swap(arr[index],arr[(index-1)/2]);
            index = (index-1)/2;
        }
        
        cout<<arr[index]<<" is Inserted into the heap \n";
    }
    
    void Heapify(int index){
        int largest = index;
        int left = 2*index+1;
        int right = 2*index+2;
        
        // largest will store the index of element which is greater between parent, left and right child
        if(left<size && arr[left] > arr[largest]){  // left<size is checking the condition whether index exist or not
            largest = left;
        }
        if(right<size && arr[right] > arr[largest]){
            largest = right;
        }
        
        if(largest != index){  // agar dono same nai hai matlab wo update ho gaya hai
            swap(arr[index],arr[largest]);
            Heapify(largest);
        }
    }
    
    
    // For printing the element of heap
    void print(){
        for(int i=0; i<size; i++){
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }
    
    // Deletion of node in heap
    void Delete(){
        if(size==0){
            cout<<"Heap Underflow \n";
            return;
        }
        cout<<arr[0]<<" deleted form the heap \n";
        arr[0] = arr[size-1];
        size--;  // value interchange karne ke bad size ko ek se kam kar do 
        
        if(size==0){
            return;
        }
        
        Heapify(0); // here 0 is the index, which we have to get at it's correct position
    }
    
};

int main(){
    MaxHeap H1(6);
    H1.insert(4);
    H1.insert(14);
    H1.Delete();
    H1.insert(11);
    H1.print();
    H1.insert(114);
    H1.insert(24);
    H1.insert(1);
    H1.print();
    H1.insert(25);
    
}
